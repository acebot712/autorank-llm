[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autorank-llm"
version = "0.2.0"
description = "Automated ranking of Language Learning Models (LLMs) through recursive peer evaluation"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache License 2.0"}
authors = [
    {name = "Abhijoy Sarkar", email = "abhijoy.sar@gmail.com"}
]
keywords = ["llm", "evaluation", "ranking", "benchmarking", "ai", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "langchain-community>=0.0.38",
    "langchain-core>=0.1.52",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
ollama = ["langchain-community>=0.0.38"]
openai = ["langchain-openai>=0.0.5"]
huggingface = ["langchain-huggingface>=0.0.1"]

[project.urls]
Homepage = "https://github.com/acebot712/autorank-llm"
"Bug Tracker" = "https://github.com/acebot712/autorank-llm/issues"
"Source Code" = "https://github.com/acebot712/autorank-llm"

[tool.black]
line-length = 127
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["autorank_llm"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
